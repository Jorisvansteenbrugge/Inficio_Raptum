<!DOCTYPE html>
<meta charset="utf-8">
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<meta name="description" content="" />
<meta name="keywords" content="" />
<link href="http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,900,300italic" rel="stylesheet" />
<script src="js/jquery.min.js"></script>
<script src="js/jquery.dropotron.min.js"></script>
<script src="js/config.js"></script>
<script src="js/skel.min.js"></script>
<script src="js/skel-panels.min.js"></script>
<noscript>
	<link rel="stylesheet" href="css/skel-noscript.css" />
	<link rel="stylesheet" href="css/style.css" />
	<link rel="stylesheet" href="css/style-desktop.css" />
</noscript>

<link rel="icon" type="image/vnd.microsoft.icon" href="images\logo.jpg" />
<!--[if lte IE 8]><script src="js/html5shiv.js"></script><link rel="stylesheet" href="css/ie8.css" /><![endif]-->
</head>
<style>
	.node {
		font: 300 18px"Helvetica Neue", Helvetica, Arial, sans-serif;
		fill: #bbb;
	}
	.node:hover {
		fill: #000;
	}
	.link {
		stroke: steelblue;
		stroke-opacity: .4;
		fill: none;
		pointer-events: none;
	}
	.node:hover,
	.node--source,
	.node--target {
		font-weight: 700;
	}
	.node--source {
		fill: #2ca02c;
	}
	.node--target {
		fill: #d62728;
	}
	.link--source,
	.link--target {
		stroke-opacity: 1;
		stroke-width: 2px;
	}
	.link--source {
		stroke: #d62728;
	}
	.link--target {
		stroke: #2ca02c;
	}
	

</style>
<%import sys
sys.path.append('/home/bi2_pg6/public_html/Inficio Raptum/Python')
import nextlevelpython
%>

<body>

	<div id="header-wrapper">

		<div class="container">
			<div class="row">
				<div class="12u">

					<!-- Header -->
					<section id="header">

						<!-- Logo -->
						<h1><a href="index.html"><img src="images\logo.jpg" alt="logo" width="196" height="176"></a></h1>

						<!-- Nav -->
						<nav id="nav">
							<ul>
								<li><a href="index.html">Home</a>
								</li>
                                <li class="current_page_item"><a href="graphNew.psp">Visualization</a>
								</li>
								<li><a href="http://cytosine.nl/~bi2_pg6/Inficio%20Raptum/visualization.psp?search=">Specific Visualization</a>
								</li>
								<li>
									<a href="http://cytosine.nl/~bi2_pg6/Inficio%20Raptum/Search_New.psp?Substance=&Organism=">Search</a>
									
								</li>
								<li><a href="get-started.html">Get started</a>
								</li>
								<li><a href="about-us.html">About us</a>
								</li>
								
							</ul>
						</nav>

					</section>
                    
                    
    				<div style="width:800px; margin:0 auto;" id="graph"></div>
					<div id="tablediv"></div>     
					
                    
					
                   
                    

					<script src="http://d3js.org/d3.v3.min.js"></script>
					<script>
						var diameter = 600,
							radius = diameter / 2,
							innerRadius = radius - 150;

						var cluster = d3.layout.cluster()
							.size([360, innerRadius])
							.sort(null)
							.value(function (d) {
								return d.size;
							});

						var bundle = d3.layout.bundle();

						var line = d3.svg.line.radial()
							.interpolate("bundle")
							.tension(.85)
							.radius(function (d) {
								return d.y;
							})
							.angle(function (d) {
								return d.x / 180 * Math.PI;
							});

						var svg = d3.select("#graph").append("svg")
							.attr("width", diameter)
							.attr("height", diameter)
							.append("g")
							.attr("transform", "translate(" + radius + "," + radius + ")");

						var link = svg.append("g").selectAll(".link"),
							node = svg.append("g").selectAll(".node");

						d3.json("Python/nextlevelgraph.json", function (error, classes) {
							var nodes = cluster.nodes(packageHierarchy(classes)),
								links = packageImports(nodes);

							link = link
								.data(bundle(links))
								.enter().append("path")
								.each(function (d) {
									d.source = d[0], d.target = d[d.length - 1];
								})
								.attr("class", "link")
								.attr("d", line);

							node = node
								.data(nodes.filter(function (n) {
									return !n.children;
								}))
								.enter().append("text")
								.attr("class", "node")
								.attr("dy", ".31em")
								.attr("transform", function (d) {
									return "rotate(" + (d.x - 90) + ")translate(" + (d.y + 8) + ",0)" + (d.x < 180 ? "" : "rotate(180)");
								})
								.style("text-anchor", function (d) {
									return d.x < 180 ? "start" : "end";
								})
								.text(function (d) {
									return d.key;
								})
								.on("mouseover", mouseovered)
								.on("mouseout", mouseouted)
								.on("click", function (d, i) {var url = "http://cytosine.nl/~bi2_pg6/Inficio%20Raptum/visualization.psp?search=";
								url+=d.name.split(".")[2];
								window.location.href=url});
						});

						function mouseovered(d) {
							node
								.each(function (n) {
									n.target = n.source = false;
								});

							link
								.classed("link--target", function (l) {
									if (l.target === d) return l.source.source = true;
								})
								.classed("link--source", function (l) {
									if (l.source === d) return l.target.target = true;
								})
								.filter(function (l) {
									return l.target === d || l.source === d;
								})
								.each(function () {
									this.parentNode.appendChild(this);
								});

							node
								.classed("node--target", function (n) {
									return n.target;
								})
								.classed("node--source", function (n) {
									return n.source;
								});
						}

						function mouseouted(d) {
							link
								.classed("link--target", false)
								.classed("link--source", false);

							node
								.classed("node--target", false)
								.classed("node--source", false);
						}

						d3.select(self.frameElement).style("height", diameter + "px");

						 // Lazily construct the package hierarchy from class names.
						function packageHierarchy(classes) {
							var map = {};

							function find(name, data) {
								var node = map[name],
									i;
								if (!node) {
									node = map[name] = data || {
										name: name,
										children: []
									};
									if (name.length) {
										node.parent = find(name.substring(0, i = name.lastIndexOf(".")));
										node.parent.children.push(node);
										node.key = name.substring(i + 1);
									}
								}
								return node;
							}

							classes.forEach(function (d) {
								find(d.name, d);
							});

							return map[""];
						}

						 // Return a list of imports for the given array of nodes.
						function packageImports(nodes) {
							var map = {},
								imports = [];

							// Compute a map from name to node.
							nodes.forEach(function (d) {
								map[d.name] = d;
							});

							// For each import, construct a link from the source to target node.
							nodes.forEach(function (d) {
								if (d.imports) d.imports.forEach(function (i) {
									imports.push({
										source: map[d.name],
										target: map[i]
									});
								});
							});

							return imports;
						}
					</script>

				</div>

			</div>
		</div>
	</div>

</body>

</html>
